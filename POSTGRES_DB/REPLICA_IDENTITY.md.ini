REPLICA IDENTITY (From V9.4 or later)
https://www.postgresql.org/docs/10/sql-altertable.html

* DEFUALT 仅针对非系统表, 记录主键列的旧行信息。
* USING INDEX 记录被INDEX涵盖的所有列的旧行信息。这些行必须是唯一，非局部或迟缓，并且被标记为非空的列。
* FULL 记录旧行信息所在行的所有列的内容
* NOTHING 不记录任何信息，系统表默认属性。

伪代码中的buffer manager
https://doxygen.postgresql.org/bufmgr_8c_source.html#l01833

伪代码中的内容, 通过relation_mark_replica_identity来更新表的REPLICA IDENTITY的属性
https://doxygen.postgresql.org/tablecmds_8c_source.html#l14633
File -> src -> command -> tablecmds.c

pg_class.h

relation_mark_replica_identity
{
     Relation    pg_index;
     Relation    pg_class;
     HeapTuple   pg_class_tuple;
     HeapTuple   pg_index_tuple;
     Form_pg_class pg_class_form;
     Form_pg_index pg_index_form;
 
     ListCell   *index;
 
     /*
      * Check whether relreplident has changed, and update it if so.
      */
     pg_class = table_open(RelationRelationId, RowExclusiveLock);
     pg_class_tuple = SearchSysCacheCopy1(RELOID,
                                          ObjectIdGetDatum(RelationGetRelid(rel)));
     if (!HeapTupleIsValid(pg_class_tuple))
         elog(ERROR, "cache lookup failed for relation \"%s\"",
              RelationGetRelationName(rel));
     pg_class_form = (Form_pg_class) GETSTRUCT(pg_class_tuple);	 
	 /*
	  * Form_pg_class from pg_class.h which defined the relation's replica identity
	  */
     if (pg_class_form->relreplident != ri_type)
     {
         pg_class_form->relreplident = ri_type;
         CatalogTupleUpdate(pg_class, &pg_class_tuple->t_self, pg_class_tuple);
     }
     table_close(pg_class, RowExclusiveLock);
     heap_freetuple(pg_class_tuple);
 
     /*
      * Check whether the correct index is marked indisreplident; if so, we're
      * done.
      */
     if (OidIsValid(indexOid))
     {
         Assert(ri_type == REPLICA_IDENTITY_INDEX);
 
         pg_index_tuple = SearchSysCache1(INDEXRELID, ObjectIdGetDatum(indexOid));
         if (!HeapTupleIsValid(pg_index_tuple))
             elog(ERROR, "cache lookup failed for index %u", indexOid);
         pg_index_form = (Form_pg_index) GETSTRUCT(pg_index_tuple);
 
         if (pg_index_form->indisreplident)
         {
             ReleaseSysCache(pg_index_tuple);
             return;
         }
         ReleaseSysCache(pg_index_tuple);
     }
 
     /*
      * Clear the indisreplident flag from any index that had it previously,
      * and set it for any index that should have it now.
      */
     pg_index = table_open(IndexRelationId, RowExclusiveLock);
     foreach(index, RelationGetIndexList(rel))
     {
         Oid         thisIndexOid = lfirst_oid(index);
         bool        dirty = false;
 
         pg_index_tuple = SearchSysCacheCopy1(INDEXRELID,
                                              ObjectIdGetDatum(thisIndexOid));
         if (!HeapTupleIsValid(pg_index_tuple))
             elog(ERROR, "cache lookup failed for index %u", thisIndexOid);
         pg_index_form = (Form_pg_index) GETSTRUCT(pg_index_tuple);
 
         /*
          * Unset the bit if set.  We know it's wrong because we checked this
          * earlier.
          */
         if (pg_index_form->indisreplident)
         {
             dirty = true;
             pg_index_form->indisreplident = false;
         }
         else if (thisIndexOid == indexOid)
         {
             dirty = true;
             pg_index_form->indisreplident = true;
         }
 
         if (dirty)
         {
             CatalogTupleUpdate(pg_index, &pg_index_tuple->t_self, pg_index_tuple);
             InvokeObjectPostAlterHookArg(IndexRelationId, thisIndexOid, 0,
                                          InvalidOid, is_internal);
         }
         heap_freetuple(pg_index_tuple);
     }
 
     table_close(pg_index, RowExclusiveLock);
 }

ATExecReplicaIdentity(Relation rel, ReplicaIdentityStmt *stmt, LOCKMODE lockmode)
{
     Oid         indexOid;
     Relation    indexRel;
     int         key;
 
     if (stmt->identity_type == REPLICA_IDENTITY_DEFAULT)
     {
         relation_mark_replica_identity(rel, stmt->identity_type, InvalidOid, true);
         return;
     }
     else if (stmt->identity_type == REPLICA_IDENTITY_FULL)
     {
         relation_mark_replica_identity(rel, stmt->identity_type, InvalidOid, true);
         return;
     }
     else if (stmt->identity_type == REPLICA_IDENTITY_NOTHING)
     {
         relation_mark_replica_identity(rel, stmt->identity_type, InvalidOid, true);
         return;
     }
     else if (stmt->identity_type == REPLICA_IDENTITY_INDEX)
     {
          /* fallthrough */ ;
     }
     else
         elog(ERROR, "unexpected identity type %u", stmt->identity_type);
 
 
     /* Check that the index exists */
     indexOid = get_relname_relid(stmt->name, rel->rd_rel->relnamespace);
     if (!OidIsValid(indexOid))
         ereport(ERROR,
                 (errcode(ERRCODE_UNDEFINED_OBJECT),
                  errmsg("index \"%s\" for table \"%s\" does not exist",
                         stmt->name, RelationGetRelationName(rel))));
 
     indexRel = index_open(indexOid, ShareLock);
 
     /* Check that the index is on the relation we're altering. */
     if (indexRel->rd_index == NULL ||
         indexRel->rd_index->indrelid != RelationGetRelid(rel))
         ereport(ERROR,
                 (errcode(ERRCODE_WRONG_OBJECT_TYPE),
                  errmsg("\"%s\" is not an index for table \"%s\"",
                         RelationGetRelationName(indexRel),
                         RelationGetRelationName(rel))));
     /* The AM must support uniqueness, and the index must in fact be unique. */
     if (!indexRel->rd_indam->amcanunique ||
         !indexRel->rd_index->indisunique)
         ereport(ERROR,
                 (errcode(ERRCODE_WRONG_OBJECT_TYPE),
                  errmsg("cannot use non-unique index \"%s\" as replica identity",
                         RelationGetRelationName(indexRel))));
     /* Deferred indexes are not guaranteed to be always unique. */
     if (!indexRel->rd_index->indimmediate)
         ereport(ERROR,
                 (errcode(ERRCODE_FEATURE_NOT_SUPPORTED),
                  errmsg("cannot use non-immediate index \"%s\" as replica identity",
                         RelationGetRelationName(indexRel))));
     /* Expression indexes aren't supported. */
     if (RelationGetIndexExpressions(indexRel) != NIL)
         ereport(ERROR,
                 (errcode(ERRCODE_FEATURE_NOT_SUPPORTED),
                  errmsg("cannot use expression index \"%s\" as replica identity",
                         RelationGetRelationName(indexRel))));
     /* Predicate indexes aren't supported. */
     if (RelationGetIndexPredicate(indexRel) != NIL)
         ereport(ERROR,
                 (errcode(ERRCODE_FEATURE_NOT_SUPPORTED),
                  errmsg("cannot use partial index \"%s\" as replica identity",
                         RelationGetRelationName(indexRel))));
     /* And neither are invalid indexes. */
     if (!indexRel->rd_index->indisvalid)
         ereport(ERROR,
                 (errcode(ERRCODE_FEATURE_NOT_SUPPORTED),
                  errmsg("cannot use invalid index \"%s\" as replica identity",
                         RelationGetRelationName(indexRel))));
 
     /* Check index for nullable columns. */
     for (key = 0; key < IndexRelationGetNumberOfKeyAttributes(indexRel); key++)
     {
         int16       attno = indexRel->rd_index->indkey.values[key];
         Form_pg_attribute attr;
 
         /*
          * Reject any other system columns.  (Going forward, we'll disallow
          * indexes containing such columns in the first place, but they might
          * exist in older branches.)
          */
         if (attno <= 0)
             ereport(ERROR,
                     (errcode(ERRCODE_INVALID_COLUMN_REFERENCE),
                      errmsg("index \"%s\" cannot be used as replica identity because column %d is a system column",
                             RelationGetRelationName(indexRel), attno)));
 
         attr = TupleDescAttr(rel->rd_att, attno - 1);
         if (!attr->attnotnull)
             ereport(ERROR,
                     (errcode(ERRCODE_WRONG_OBJECT_TYPE),
                      errmsg("index \"%s\" cannot be used as replica identity because column \"%s\" is nullable",
                             RelationGetRelationName(indexRel),
                             NameStr(attr->attname))));
     }
 
     /* This index is suitable for use as a replica identity. Mark it. */
     relation_mark_replica_identity(rel, stmt->identity_type, indexOid, true);
 
     index_close(indexRel, NoLock);
 }


create table t1_identity (id int, name text, age smallint);

=> select relname, relreplident from pg_class where relkind='r' and relname='t1_identity';
   relname   | relreplident 
-------------+--------------
 t1_identity | d



logical/relation.c
https://doxygen.postgresql.org/src_2backend_2replication_2logical_2relation_8c_source.html#l00103
logicalrep_rel_open {
/*
 * Check that replica identity matches. We allow for stricter replica
 * identity (fewer columns) on subscriber as that will not stop us
 * from finding unique tuple. IE, if publisher has identity
 * (id,timestamp) and subscriber just (id) this will not be a problem,
 * but in the opposite scenario it will.
 *
 * Don't throw any error here just mark the relation entry as not
 * updatable, as replica identity is only for updates and deletes but
 * inserts can be replicated even without it.
 */
}

但在insert,update, delete上的表现不同

Nothing 模式下:
Delete, Update 不记录变更信息,
{
        "change": [
                {
                        "kind": "insert",
                        "schema": "platform_dev",
                        "table": "t1_identity",
                        "columnnames": ["id", "name", "age", "value", "refresh"],
                        "columntypes": ["integer", "text", "smallint", "text", "integer"],
                        "columnvalues": [13, "shawn", 32, "sub", null]
                }
        ]
}

DEFUALT
DELETE,UPDATE 仅记录改变的主键的值
 
没有主键如下提示：
WARNING:  table "t1_identity" without primary key or replica identity is nothing


FULL 模式下：


=> create INDEX CONCURRENTLY idx_id on t1_identity using btree(id);
CREATE INDEX
=> alter TABLE t1_identity replica identity USING INDEX idx_id;
ERROR:  cannot use non-unique index "idx_id" as replica identity

=> insert into t1_identity select n as id, n||ran

{
        "change": [
                {
                        "kind": "update",
                        "schema": "platform_dev",
                        "table": "t1_identity",
                        "columnnames": ["id", "name", "age"],
                        "columntypes": ["integer", "text", "smallint"],
                        "columnvalues": [10, "1032", 21],
                        "oldkeys": {
                                "keynames": ["id"],
                                "keytypes": ["integer"],
                                "keyvalues": [10]
                        }
                }
        ]
}
{
        "change": [
        ]
}
{
        "change": [
                {
                        "kind": "update",
                        "schema": "platform_dev",
                        "table": "t1_identity",
                        "columnnames": ["id", "name", "age"],
                        "columntypes": ["integer", "text", "smallint"],
                        "columnvalues": [10, "2031", 21],
                        "oldkeys": {
                                "keynames": ["id", "name", "age"],
                                "keytypes": ["integer", "text", "smallint"],
                                "keyvalues": [10, "1032", 21]
                        }
                }
        ]
}
